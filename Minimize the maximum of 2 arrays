Time Complexity : O(N)
Space Complexity : O(N)

import java.util.*;
public class Solution {
    public int minimizeMaxNumber(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {
        Set<Integer> arr1 = new HashSet<>();
        Set<Integer> arr2 = new HashSet<>();
        
        int num = 1;
        
        while (arr1.size() < uniqueCnt1 || arr2.size() < uniqueCnt2) {
            if (arr1.size() < uniqueCnt1 && num % divisor1 != 0 && !arr2.contains(num)) {
                arr1.add(num);
            } else if (arr2.size() < uniqueCnt2 && num % divisor2 != 0 && !arr1.contains(num)) {
                arr2.add(num);
            }
            num++;
        
        return num - 1;
    }
    public static void main(String[] args)
    {
        Solution obj = new Solution();
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Divisor 1: ");
        int divisor1=sc.nextInt();
        System.out.print("Enter Divisor 2: ");
        int divisor2=sc.nextInt();
        System.out.print("Enter unique count 1: ");
        int uniquecnt1=sc.nextInt();
        System.out.print("Enter unique count 2: ");
        int uniquecnt2=sc.nextInt();
        System.out.println("Minimize the Maximum Number : " + obj.minimizeMaxNumber(divisor1,divisor2,uniquecnt1,uniquecnt2));
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------

Time Complexity - O(
